expd <- rexp(sims, lambda)
expd_mean = mean(expd)
expd_var = var(expd)
g3 <- qplot(expd,  fill=I("blue"), color=I("white"), geom="histogram", xlab="Value", binwidth=1,
main="Distribution of 1000 exponentials")
g3 <- g3 + geom_vline(xintercept = expd_mean, color="red")
g3 <- g3 + geom_text(mapping=aes(x=expd_mean, y=180, label=paste("sample mean=",round(expd_mean,3))), size=4, hjust= -0.1, vjust=1)
g3
library(grid)
library(gridExtra)
grid.arrange(g1, g3, ncol=2)
## Data analysis for ToothGrow data
library(ggplot2)
data(ToothGrowth)
dim(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
# Plot data set
g <- ggplot(ToothGrowth, aes(x = supp, y = len, group = factor(dose)))
g <- g + geom_point(size =10, pch = 21, aes(fill = factor(dose)), alpha = .5)
g
# Extra tests with different assumptions
g1 <- ToothGrowth$len[ToothGrowth$supp=="VC"]
g2 <- ToothGrowth$len[ToothGrowth$supp=="OJ"]
# Confidence intervals
t.test(g2,g1, paired=FALSE, var.equal=FALSE)
t <- t.test(len ~ I(relevel(supp, 2)), paired = FALSE, var.equal=FALSE, data = ToothGrowth)
t
interval <- as.vector(t$conf.int)
t.test(g2,g1, paired=TRUE)  #if assuming paired and constant variance acroos the two groups
t.test(g2,g1, paired=FALSE, var.equal=TRUE) # if assuming independent groups, but constant variance
## Data analysis for ToothGrow data
library(ggplot2)
data(ToothGrowth)
dim(ToothGrowth)
summary(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
# Plot data set
g <- ggplot(ToothGrowth, aes(x = supp, y = len, group = factor(dose)))
g <- g + geom_point(size =10, pch = 21, aes(fill = factor(dose)), alpha = .5)
g
# Extra tests with different assumptions
g1 <- ToothGrowth$len[ToothGrowth$supp=="VC"]
g2 <- ToothGrowth$len[ToothGrowth$supp=="OJ"]
# Confidence intervals
t.test(g2,g1, paired=FALSE, var.equal=FALSE)
t <- t.test(len ~ I(relevel(supp, 2)), paired = FALSE, var.equal=FALSE, data = ToothGrowth)
t
interval <- as.vector(t$conf.int)
t.test(g2,g1, paired=TRUE)  #if assuming paired and constant variance acroos the two groups
t.test(g2,g1, paired=FALSE, var.equal=TRUE) # if assuming independent groups, but constant variance
set.seed(33)
lambda <- 0.2
# We perform 1000 simulations with 40 samples
sample_size <- 40
simulations <- 1000
# Lets do 1000 simulations
simulated_exponentials <- replicate(simulations, mean(rexp(sample_size,lambda)))
#
simulated_means  <- mean(simulated_exponentials)
simulated_median <- median(simulated_exponentials)
simulated_sd     <- sd(simulated_exponentials)
tm <- 1/lambda                     # calculate theoretical mean
sm <- mean(simulated_exponentials) # calculate avg sample mean
hist(simulated_exponentials,  freq=TRUE, breaks=75,
main="Sample Means of Exponentials (lambda 0.2)",
xlab="Sample Means from 1000 Simulations")
abline(v=5, col="blue", lwd=2)
set.seed(33)
lambda <- 0.2
# We perform 1000 simulations with 40 samples
sample_size <- 40
simulations <- 1000
# Lets do 1000 simulations
simulated_exponentials <- replicate(simulations, mean(rexp(sample_size,lambda)))
#
simulated_means  <- mean(simulated_exponentials)
simulated_median <- median(simulated_exponentials)
simulated_sd     <- sd(simulated_exponentials)
tm <- 1/lambda                     # calculate theoretical mean
sm <- mean(simulated_exponentials) # calculate avg sample mean
hist(simulated_exponentials,  freq=TRUE, breaks=75,
main="Sample Means of Exponentials (lambda 0.2)",
xlab="Sample Means from 1000 Simulations")
abline(v=5, col="blue", lwd=2)
mkci <- function(ttestval) {
paste('[ ', round(ttestval$conf.int[1], 4), ', ', round(ttestval$conf.int[2], 4), ' ]', sep='')
}
dose.test <- function(dose) {
dose.set <- ToothGrowth[which(ToothGrowth$dose == dose), c('len', 'supp')]
t.test(len ~ supp, data=dose.set, paired = F, var.equal = F)
}
d05 <- dose.test(0.5)
d1 <- dose.test(1)
d2 <- dose.test(2)
df <- data.frame(
dose=c(0.5, 1, 2),
t.statistic=c(d05$statistic, d1$statistic, d2$statistic),
p.value=c(d05$p.value, d1$p.value, d2$p.value),
conf.int=c(mkci(d05), mkci(d1), mkci(d2))
)
colnames(df) <- c('Dose', 't-statistic', 'p-value', '95% Confidence Interval')
kable(df, caption = 'T2. Supplement Effect on Growth')
supp.test <- function(supp, dose) {
supp.set <- ToothGrowth[which(ToothGrowth$supp == supp & ToothGrowth$dose %in% dose), c('len', 'dose')]
t.test(len ~ dose, data=supp.set, paired = F, var.equal = F)
}
d.oj.5vs1 <- supp.test('OJ', c(0.5, 1))
d.oj.1vs2 <- supp.test('OJ', c(1, 2))
d.vc.5vs1 <- supp.test('VC', c(0.5, 1))
d.vc.1vs2 <- supp.test('VC', c(1, 2))
df <- data.frame(
supp.dose=c('OJ 0.5 vs 1mg', 'OJ 1 vs 2mg', 'VC 0.5 vs 1mg', 'VC 1 vs 2mg'),
t.statistic=c(d.oj.5vs1$statistic, d.oj.1vs2$statistic, d.vc.5vs1$statistic, d.vc.1vs2$statistic),
p.value=c(d.oj.5vs1$p.value, d.oj.1vs2$p.value, d.vc.5vs1$p.value, d.vc.1vs2$p.value),
conf.int=c(mkci(d.oj.5vs1), mkci(d.oj.1vs2), mkci(d.vc.5vs1), mkci(d.vc.1vs2))
)
colnames(df) <- c('Supplement Type/Dose', 't-statistic', 'p-value', '95% Confidence Interval')
kable(df, caption='T3. Supplement Effect on Growth')
data <- as.data.frame(exp_sample_means)
ggplot(data, aes(x = exp_sample_means)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
set.seed(1234)
exp_sample_means <- NULL
for(i in 1:1000) {
exp_sample_means <- c(exp_sample_means, mean(rexp(40, 0.2)))
}
mean(exp_sample_means)
var(exp_sample_means)
data <- as.data.frame(exp_sample_means)
ggplot(data, aes(x = exp_sample_means)) +
geom_histogram(binwidth = 0.4, color = 'black', fill = 'white', aes(y = ..density..)) +
stat_function(aes(x = c(2, 8)), fun = dnorm, color = 'red',
args = list(mean = 5, sd = sqrt(0.625))) +
xlab('Sample mean') +
ylab('Density') +
ggtitle('Comparison of the sample distribution\n and the theoretical distribution')
library(ggplot2)
library(dplyr)
library(broom)
library(wesanderson)
library(grid)
install.packages("wesanderson")
install.packages("broom")
library(ggplot2)
library(dplyr)
library(broom)
library(wesanderson)
library(grid)
with(ToothGrowth, table(dose, supp))
g_len_by_supp <- ggplot(ToothGrowth, aes(supp, len)) +
geom_boxplot() +
xlab('Supplement type') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by supplement type')
g_len_by_dose <- ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot() +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level')
grid.newpage()
# Push viewport to graphic device
pushViewport(viewport(layout = grid.layout(1, 2, widths = c(0.5, 0.5))))
print(g_len_by_supp, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(g_len_by_dose, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
ToothGrowth %>% group_by(dose) %>%
summarize(
q25 = quantile(len, 0.25),
q75 = quantile(len, 0.75)
) %>%
as.data.frame
ggplot(ToothGrowth, aes(as.factor(dose), len)) +
geom_boxplot(aes(fill = as.factor(dose))) +
facet_grid(. ~ supp) +
xlab('Dose (mg)') +
ylab('Tooth length (mm)') +
ggtitle('Tooth length by dose level and supplement type') +
scale_fill_manual(values = wes_palette("FantasticFox")) +
theme(legend.position = "none")
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
t_diff_supp <- t.test(len ~ supp, ToothGrowth, var.equal = FALSE)
tidy(t_diff_supp)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 1]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ1mg = 0'
) %>%
select(9, 1:8)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 2],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ2mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
pairwise_results <- t.test(ToothGrowth$len[ToothGrowth$dose == 1],
ToothGrowth$len[ToothGrowth$dose == 0.5]) %>%
tidy %>%
mutate(
null_hypothesis = 'µ1mg - µ0.5mg = 0'
) %>%
select(9, 1:8) %>%
bind_rows(pairwise_results, .)
print.data.frame(pairwise_results)
swirl()
library(swirl)
swirl()
install_from_swirl(Reggression Models)
install_from_swirl(Reggression Modles)
install_from_swirl(Regression Models)
install_from_swirl("Regression Models")
swirl()
swirl()
library(swirl)
swirl()
cor(gpa_nor~gch_nor)
cor(gch_nor,gpa_nor)
l_nor <- lm(gch_nor~gpa_nor)
#plot the original Galton data points with larger dots for more freq pts
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
#original regression line, children as outcome, parents as predictor
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
#new regression line, parents as outcome, children as predictor
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
#assume correlation is 1 so slope is ratio of std deviations
abline(mean(y) - mean(x) * sd(y) / sd(x), #intercept
sd(y) / sd(x),  #slope
lwd = 2)
points(mean(x), mean(y), cex = 2, pch = 19) #big point of intersection
#plot the original Galton data points with larger dots for more freq pts
y <- galton$child
x <- galton$parent
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .07 * freqData$freq, xlab = "parent", ylab = "child")
#original regression line, children as outcome, parents as predictor
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x), #intercept
sd(y) / sd(x) * cor(y, x),  #slope
lwd = 3, col = "red")
#new regression line, parents as outcome, children as predictor
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x), #intercept
sd(y) / cor(y, x) / sd(x), #slope
lwd = 3, col = "blue")
#assume correlation is 1 so slope is ratio of std deviations
abline(mean(y) - mean(x) * sd(y) / sd(x), #intercept
sd(y) / sd(x),  #slope
lwd = 2)
points(mean(x), mean(y), cex = 2, pch = 19) #big point of intersection
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
install.packages("caret")
data("iris");library(ggplot2)
names(iris)
table(iris$Species)
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library("caret", lib.loc="~/R/win-library/3.2")
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data = training)
install.packages("rpart")
modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
library(caret)
modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data = training)
library(caret)
modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data = training)
modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
install.packages("rpart.plot")
library("rpart.plot", lib.loc="~/R/win-library/3.2")
library("rpart", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
modFit <- train(Species ~.,method="rpart",data=training)
print(modFit$finalModel)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
library("caret", lib.loc="~/R/win-library/3.2")
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data = training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
install.packages("rattle")
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
modFit <-train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("e1071")
modFit <-train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("ratt")
install.packages("rattle")
library("caret", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("rattle", lib.loc="~/R/win-library/3.2")
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("e1071", lib.loc="~/R/win-library/3.2")
library("rattle", lib.loc="~/R/win-library/3.2")
library("rpart", lib.loc="~/R/win-library/3.2")
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
library("caret", lib.loc="~/R/win-library/3.2")
inTrain <-createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data = training)
modFit <-train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
setwd("~/BjsDocs/datasciencecoursera/Maching Learing")
library("caret", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
library("rpart", lib.loc="~/R/win-library/3.2")
library("rpart.plot", lib.loc="~/R/win-library/3.2")
install.packages("RColorBrewer")
library("rattle", lib.loc="~/R/win-library/3.2")
install.packages("randomForest")
library("randomForest", lib.loc="~/R/win-library/3.2")
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=myTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=myTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, myTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=myTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=myTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, myTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=myTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=newTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=newTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, newTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=newTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=newTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, newTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=newTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=newTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, newTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=newTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=newTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, newTesting$classe)
gbmAccuracyTest
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 1)
gbmFit1 <- train(classe ~ ., data=newTraining, method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFinMod1 <- gbmFit1$finalModel
gbmPredTest <- predict(gbmFit1, newdata=newTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, newTesting$classe)
gbmAccuracyTest
